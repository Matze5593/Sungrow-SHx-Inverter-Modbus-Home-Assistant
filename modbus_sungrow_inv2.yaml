# Home Assistant Sungrow inverter integration
# https://github.com/mkaiser/Sungrow-SHx-Inverter-Modbus-Home-Assistant
# by Martin Kaiser
# last update: 2023-08-21 (2)
# code without battery

modbus:
  - name: SungrowSHx_inv2
    type: tcp
    host: !secret sungrow_modbus_host_ip_inv2
    port: !secret sungrow_modbus_port_inv2
    retry_on_empty: true
    retries: 10
    close_comm_on_error: true
    delay: 5
    # timeout: 5
    sensors:
      - name: Sungrow device type code_inv2
        unique_id: sg_dev_code_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 4999 # reg 5000
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        scan_interval: 600

      - name: Inverter temperature_inv2
        unique_id: sg_inverter_temperature_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5007 # reg 5008
        input_type: input
        count: 1
        data_type: int16
        precision: 1
        unit_of_measurement: Â°C
        device_class: Temperature
        scale: 0.1
        scan_interval: 10

      - name: MPPT1 voltage_inv2
        unique_id: sg_mppt1_voltage_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5010 # reg 5011
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        scale: 0.1
        scan_interval: 10

      - name: MPPT1 current_inv2
        unique_id: sg_mppt1_current_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5011 # reg 5012
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 2
        unit_of_measurement: A
        device_class: Current
        scale: 0.1
        scan_interval: 10

      - name: MPPT2 voltage_inv2
        unique_id: sg_mppt2_voltage_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5012 # reg 5013
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        scale: 0.1
        scan_interval: 10

      - name: MPPT2 current_inv2
        unique_id: sg_mppt2_current_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5013 # reg 5014
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 2
        unit_of_measurement: A
        device_class: Current
        scale: 0.1
        scan_interval: 10

      - name: Total DC power_inv2
        unique_id: sg_total_dc_power_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5016 # reg 5017
        input_type: input
        count: 2
        data_type: uint32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Phase A voltage_inv2
        unique_id: sg_phase_a_voltage_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5018 # reg: 5019
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase B voltage_inv2
        unique_id: sg_phase_b_voltage_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5019 # reg: 5020
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase C voltage_inv2
        unique_id: sg_phase_c_voltage_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5020 # reg: 5021
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: V
        device_class: Voltage
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase A current_inv2
        unique_id: sg_phase_a_current_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13030 # reg 13031
        input_type: input
        count: 1
        data_type: int16
        swap: none
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase B current_inv2
        unique_id: sg_phase_b_current_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13031 # reg 13032
        input_type: input
        count: 1
        data_type: int16
        swap: none
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Phase C current_inv2
        unique_id: sg_phase_c_current_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13032 # reg 13033
        input_type: input
        count: 1
        data_type: int16
        swap: none
        precision: 1
        unit_of_measurement: A
        device_class: current
        state_class: measurement
        scale: 0.1
        scan_interval: 10


      - name: Grid frequency_inv2
        unique_id: sg_grid_frequency_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5035 # reg 5036
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 2
        unit_of_measurement: "Hz"
        device_class: frequency
        state_class: measurement
        scale: 0.1
        scan_interval: 10

      - name: Reactive power_inv2
        unique_id: sg_reactive_power_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5032 # reg 5033
        input_type: input
        count: 2
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

      - name: Power factor_inv2
        unique_id: sg_power_factor_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 5034 # reg 5035
        input_type: input
        count: 1
        data_type: int16
        swap: none
        precision: 3
        unit_of_measurement: "%"
        device_class: power_factor
        state_class: measurement
        scale: 0.001
        scan_interval: 10

      - name: System state_inv2
        unique_id: sg_system_state_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 12999 # reg 13000
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 0
        scale: 1
        scan_interval: 10

      # register running state is not available for certain SH*RS inverters
      # template sensors are used to determine the states based on other sensors
      - name: Running state_inv2
        unique_id: sg_running_state_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13000 # reg 13001
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 0
        scale: 1
        scan_interval: 10

      - name: Daily PV generation_inv2
        unique_id: sg_daily_pv_generation_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13001 # reg 13002
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total PV generation_inv2
        unique_id: sg_total_pv_generation_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13002 # reg 13003
        input_type: input
        count: 2
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Daily exported energy from PV_inv2
        unique_id: sg_daily_exported_energy_from_PV_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13004 # reg 13005
        input_type: input
        count: 1
        data_type: uint16
        swap: none
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        scale: 0.1
        scan_interval: 600

      - name: Total exported energy from PV_inv2
        unique_id: sg_total_exported_energy_from_pv_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13005 # reg 13006
        input_type: input
        count: 2
        data_type: uint32
        swap: word
        precision: 1
        unit_of_measurement: kWh
        device_class: energy
        state_class: total
        scale: 0.1
        scan_interval: 600

      - name: Load power_inv2
        unique_id: sg_load_power_inv2
        slave: !secret sungrow_modbus_slave_inv2
        address: 13007 # reg 13008
        input_type: input
        count: 2
        data_type: int32
        swap: word
        precision: 0
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        scale: 1
        scan_interval: 10

# 'virtual' template sensors for better readability
template:
  - binary_sensor:
      - name: PV generating_inv2
        unique_id: sg_pv_generating_inv2
        availability: >-
          {{states('sensor.running_state_inv2')|is_number or 
            states('sensor.total_dc_power_inv2')|is_number
          }}
        delay_on:
          seconds: 60
        state: >-
          {% if states('sensor.running_state_inv2')|is_number %}
            {# use available sensor running_state_inv2 #}
            {{ states('sensor.running_state_inv2')|int(default=0)|bitwise_and(0x1) > 0 }}
          {% else %} 
            {# workaround for SH*RS inverters without working running_state_inv2 #}
            {% if states('sensor.total_dc_power_inv2')|int > 0 %}
              1
            {% else %} 
              0 
            {% endif %}
          {% endif %}

          

  - sensor:
      - name: MPPT1 power_inv2
        unique_id: sg_mppt1_power_inv2
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.mppt1_voltage_inv_2')|is_number and states('sensor.mppt1_current_inv_2')|is_number }}"
        state: "{{ (states('sensor.mppt1_voltage_inv_2') | float * states('sensor.mppt1_current_inv_2') | float) |int }}"

      - name: MPPT2 power_inv2
        unique_id: sg_mppt2_power_inv2
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.mppt2_voltage_inv_2')|is_number and states('sensor.mppt2_current_inv_2')|is_number }}"
        state: "{{ (states('sensor.mppt2_voltage_inv_2') | float * states('sensor.mppt2_current_inv_2') | float) |int }}"

      - name: Phase A power_inv2
        unique_id: sg_phase_a_power_inv2
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.phase_a_voltage_inv2')|is_number and states('sensor.phase_a_current_inv2')|is_number }}"
        state: "{{ (states('sensor.phase_a_voltage_inv2') | float * states('sensor.phase_a_current_inv2') | float) |int }}"

      - name: Phase B power_inv2
        unique_id: sg_phase_b_power_inv2
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.phase_b_voltage_inv2')|is_number and states('sensor.phase_b_current_inv2')|is_number }}"
        state: "{{ (states('sensor.phase_b_voltage_inv2') | float * states('sensor.phase_b_current_inv2') | float) |int }}"

      - name: Phase C power_inv2
        unique_id: sg_phase_c_power_inv2
        unit_of_measurement: W
        device_class: power
        availability: "{{states('sensor.phase_c_voltage_inv2')|is_number and states('sensor.phase_c_current_inv2')|is_number }}"
        state: "{{ (states('sensor.phase_c_voltage_inv2') | float * states('sensor.phase_c_current_inv2') | float) |int }}"

      - name: Sungrow inverter state_inv2
        unique_id: sg_inverter_state_inv2
        state: >-
          {% if ((states('sensor.system_state_inv2') | int(default=0)) == 0x0002) %}
            Stop
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0008) %}
            Standby
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0010) %}
            Initial Standby
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0020) %}
            Startup
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0040) %}
            Running
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0100) %}
            Fault
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0400) %}
            Maintain mode
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x0800) %}
            Forced mode
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x1000) %}
            Off-grid mode
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x2501) %}
            Restarting
          {% elif ((states('sensor.system_state_inv2') | int(default=0)) == 0x4000) %}
            External EMS mode
          {% else %}
            Unknown - should not see me!
          {% endif %}

      - name: Sungrow device type_inv2
        unique_id: sg_device_type_inv2
        state: >-
          {% if ((states('sensor.sungrow_device_type_code_inv2') | int(default=0))  == 0x0D06) %}
            SH3K6
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D07) %}
            SH4K6
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D09) %}
            SH5K-20  
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D03) %}
            SH5K-V13
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D0A) %}
            SH3K6-30
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D0B) %}
            SH4K6-30
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D0C) %}
            SH5K-30
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D17) %}
            SH3.RS
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D0D) %}
            SH3.6RS
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D18) %}
            SH4.0RS
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D0F) %}
            SH5.0RS
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D10) %}
            SH6.0RS
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E00) %}
            SH5.0RT
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E01) %}
            SH6.0RT
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E02) %}
            SH8.0RT
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E03) %}
            SH10RT
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E10) %}
            SH5.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E11) %}
            SH6.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E12) %}
            SH8.0RT-20
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E13) %}
            SH10RT-20
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E0C) %}
            SH5.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E0D) %}
            SH6.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E0E) %}
            SH8.0RT-V112
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E0F) %}
            SH10RT-V112
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E08) %}
            SH5.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E09) %}
            SH6.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E0A) %}
            SH8.0RT-V122
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0E0B) %}
            SH10RT-V122
          {% elif ((states('sensor.sungrow_device_type_code_inv2') | int(default=0)) == 0x0D0E) %}
            SH4.6RS
          {% else %}
            Unknown device code!
          {% endif %}
